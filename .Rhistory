}
## 破低 --> 進場空
else if( TXF_MatchPrice < low ){
OrderMKT(code,"S",lot)
BorS = "S"
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = position - lot
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
## 出場
while( position != 0 ){
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 停損 = Spread
if( position > 0 & (BPrice - TXF_MatchPrice) > spread ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0 & (TXF_MatchPrice - SPrice) > spread ){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
## 時間到 --> 出場
if( TXF_MatchTime >= outTime ){
if( position > 0 ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
}
#### 計算損益  ####
profit = SPrice - BPrice
print(paste("Profit :",profit))
## 回傳交易紀錄
if(is.na(BorS)){
print("No any signal !")
}else if(BorS == "B"){
SingleRecord = c(BorS="Buy",OpenPrice=BPrice,ClosePrice=SPrice,
OpenTime=as.character(BTime),CloseTime=as.character(STime),Profit=profit)
}else if(BorS == "S"){
SingleRecord = c(BorS="Sell",OpenPrice=SPrice,ClosePrice=BPrice,
OpenTime=as.character(STime),CloseTime=as.character(BTime),Profit=profit)
}
TradingRecord = rbind(TradingRecord,SingleRecord)
rownames(TradingRecord)=(1:nrow(TradingRecord))
return(TradingRecord)
}
## 測試
Record = HighLow("09:45:00","12:30:00","09:55:50")
HighLow = function(startTime,endTime,outTime){
#### 定義變數 & 初始化 ####
print("Initialize......")
Date <- gsub("-","",Sys.Date())
code = "TXFD8"
TXF_MatchPrice = NA
TXF_MatchTime = NA
BPrice = NA
SPrice = NA
BTime = NA
STime = NA
BorS = NA
position = 0
TradingRecord = c()
SingleRecord = c()
profit = 0
high = 0
low = Inf
spread = 0
#### 設定策略參數 ####
print("Set the parameter......")
#設定 單筆下單口數 & 最大在倉口數
lot = 1
Maxlot = 1
# 定義指標時間
# 定義交易時間
options(digits.secs=2)
startTime <- strptime(startTime,'%H:%M:%OS')
endTime <- strptime(endTime,'%H:%M:%OS')
outTime <- strptime(outTime,'%H:%M:%OS')
# 定義加碼 & 停損
#### 執行交易 ####
# print("Waiting for market open .....")
# while( Sys.time() < strptime("10:05:00",'%H:%M:%OS')){
#   ## 等待開盤
# }
## 計算指標 {高低點}
while( high == 0 )
{
print("Calculate indicator .....")
while( Sys.time() > strptime("10:25:00",'%H:%M:%OS') &
Sys.time() < strptime("10:28:00",'%H:%M:%OS') )
{
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 計算高低點
if( TXF_MatchPrice > high ) high = TXF_MatchPrice
if( TXF_MatchPrice < low ) low = TXF_MatchPrice
if( (high-low) >  spread ) spread = (high-low)
}
}
# while( Sys.time() > strptime("10:05:00",'%H:%M:%OS') &
#        Sys.time() < strptime("10:08:00",'%H:%M:%OS') )
# {
#   ## 取得最新報價
#   Mdata<-GetMatchData(DataPath,Date,code)
#   TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
#   TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
#
#   ## 計算高低點
#   if( TXF_MatchPrice > high ) high = TXF_MatchPrice
#   if( TXF_MatchPrice < low ) low = TXF_MatchPrice
#   if( (high-low) >  spread ) spread = (high-low)
# }
print(paste0("high:",high))
print(paste0("low:",low))
print(paste0("spread:",spread))
## 進場
while( abs(position) < Maxlot &
Sys.time() > startTime &
Sys.time() < endTime ){
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 破高 --> 進場多
if( TXF_MatchPrice > high ){
OrderMKT(code,"B",lot)
BorS = "B"
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = position + lot
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
## 破低 --> 進場空
else if( TXF_MatchPrice < low ){
OrderMKT(code,"S",lot)
BorS = "S"
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = position - lot
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
## 出場
while( position != 0 ){
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 停損 = Spread
if( position > 0 & (BPrice - TXF_MatchPrice) > spread ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0 & (TXF_MatchPrice - SPrice) > spread ){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
## 時間到 --> 出場
if( TXF_MatchTime >= outTime ){
if( position > 0 ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
}
#### 計算損益  ####
profit = SPrice - BPrice
print(paste("Profit :",profit))
## 回傳交易紀錄
if(is.na(BorS)){
print("No any signal !")
}else if(BorS == "B"){
SingleRecord = c(BorS="Buy",OpenPrice=BPrice,ClosePrice=SPrice,
OpenTime=as.character(BTime),CloseTime=as.character(STime),Profit=profit)
}else if(BorS == "S"){
SingleRecord = c(BorS="Sell",OpenPrice=SPrice,ClosePrice=BPrice,
OpenTime=as.character(STime),CloseTime=as.character(BTime),Profit=profit)
}
TradingRecord = rbind(TradingRecord,SingleRecord)
rownames(TradingRecord)=(1:nrow(TradingRecord))
return(TradingRecord)
}
## 測試
Record = HighLow("09:45:00","12:30:00","09:55:50")
HighLow = function(startTime,endTime,outTime){
#### 定義變數 & 初始化 ####
print("Initialize......")
Date <- gsub("-","",Sys.Date())
code = "TXFD8"
TXF_MatchPrice = NA
TXF_MatchTime = NA
BPrice = NA
SPrice = NA
BTime = NA
STime = NA
BorS = NA
position = 0
TradingRecord = c()
SingleRecord = c()
profit = 0
high = 0
low = Inf
spread = 0
#### 設定策略參數 ####
print("Set the parameter......")
#設定 單筆下單口數 & 最大在倉口數
lot = 1
Maxlot = 1
# 定義指標時間
# 定義交易時間
options(digits.secs=2)
startTime <- strptime(startTime,'%H:%M:%OS')
endTime <- strptime(endTime,'%H:%M:%OS')
outTime <- strptime(outTime,'%H:%M:%OS')
# 定義加碼 & 停損
#### 執行交易 ####
# print("Waiting for market open .....")
# while( Sys.time() < strptime("10:05:00",'%H:%M:%OS')){
#   ## 等待開盤
# }
print("Calculate indicator .....")
## 計算指標 {高低點}
while( high == 0 )
{
while( Sys.time() > strptime("10:25:00",'%H:%M:%OS') &
Sys.time() < strptime("10:28:00",'%H:%M:%OS') )
{
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 計算高低點
if( TXF_MatchPrice > high ) high = TXF_MatchPrice
if( TXF_MatchPrice < low ) low = TXF_MatchPrice
if( (high-low) >  spread ) spread = (high-low)
}
}
# while( Sys.time() > strptime("10:05:00",'%H:%M:%OS') &
#        Sys.time() < strptime("10:08:00",'%H:%M:%OS') )
# {
#   ## 取得最新報價
#   Mdata<-GetMatchData(DataPath,Date,code)
#   TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
#   TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
#
#   ## 計算高低點
#   if( TXF_MatchPrice > high ) high = TXF_MatchPrice
#   if( TXF_MatchPrice < low ) low = TXF_MatchPrice
#   if( (high-low) >  spread ) spread = (high-low)
# }
print(paste0("high:",high))
print(paste0("low:",low))
print(paste0("spread:",spread))
## 進場
while( abs(position) < Maxlot &
Sys.time() > startTime &
Sys.time() < endTime ){
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 破高 --> 進場多
if( TXF_MatchPrice > high ){
OrderMKT(code,"B",lot)
BorS = "B"
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = position + lot
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
## 破低 --> 進場空
else if( TXF_MatchPrice < low ){
OrderMKT(code,"S",lot)
BorS = "S"
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = position - lot
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
## 出場
while( position != 0 ){
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 停損 = Spread
if( position > 0 & (BPrice - TXF_MatchPrice) > spread ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0 & (TXF_MatchPrice - SPrice) > spread ){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
## 時間到 --> 出場
if( TXF_MatchTime >= outTime ){
if( position > 0 ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
}
#### 計算損益  ####
profit = SPrice - BPrice
print(paste("Profit :",profit))
## 回傳交易紀錄
if(is.na(BorS)){
print("No any signal !")
}else if(BorS == "B"){
SingleRecord = c(BorS="Buy",OpenPrice=BPrice,ClosePrice=SPrice,
OpenTime=as.character(BTime),CloseTime=as.character(STime),Profit=profit)
}else if(BorS == "S"){
SingleRecord = c(BorS="Sell",OpenPrice=SPrice,ClosePrice=BPrice,
OpenTime=as.character(STime),CloseTime=as.character(BTime),Profit=profit)
}
TradingRecord = rbind(TradingRecord,SingleRecord)
rownames(TradingRecord)=(1:nrow(TradingRecord))
return(TradingRecord)
}
## 測試
Record = HighLow("09:45:00","12:30:00","09:55:50")
source("C:/Users/90813/Desktop/R策略模組/R策略模組/下單&帳務模組/Order_module_base.R",encoding="UTF8")
source("C:/Users/90813/Desktop/R策略模組/R策略模組/下單&帳務模組/Get_quote_base.R",encoding="UTF8")
HighLow = function(startTime,endTime,outTime){
#### 定義變數 & 初始化 ####
print("Initialize......")
Date <- gsub("-","",Sys.Date())
code = "TXFD8"
TXF_MatchPrice = NA
TXF_MatchTime = NA
BPrice = NA
SPrice = NA
BTime = NA
STime = NA
BorS = NA
position = 0
TradingRecord = c()
SingleRecord = c()
profit = 0
high = 0
low = Inf
spread = 0
#### 設定策略參數 ####
print("Set the parameter......")
#設定 單筆下單口數 & 最大在倉口數
lot = 1
Maxlot = 1
# 定義指標時間
# 定義交易時間
options(digits.secs=2)
startTime <- strptime(startTime,'%H:%M:%OS')
endTime <- strptime(endTime,'%H:%M:%OS')
outTime <- strptime(outTime,'%H:%M:%OS')
#### 執行交易 ####
print("Waiting for market open .....")
while( Sys.time() < strptime("08:44:59",'%H:%M:%OS')){
## 等待開盤
}
print("Calculate indicator .....")
## 計算指標 {高低點}
while( high == 0 )
{
while( Sys.time() > strptime("08:45:00",'%H:%M:%OS') &
Sys.time() < strptime("09:00:00",'%H:%M:%OS') )
{
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 計算高低點
if( TXF_MatchPrice > high ) high = TXF_MatchPrice
if( TXF_MatchPrice < low ) low = TXF_MatchPrice
if( (high-low) >  spread ) spread = (high-low)
}
}
print(paste0("high:",high))
print(paste0("low:",low))
print(paste0("spread:",spread))
## 進場
while( abs(position) < Maxlot &
Sys.time() > startTime &
Sys.time() < endTime ){
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 破高 --> 進場多
if( TXF_MatchPrice > high ){
OrderMKT(code,"B",lot)
BorS = "B"
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = position + lot
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
## 破低 --> 進場空
else if( TXF_MatchPrice < low ){
OrderMKT(code,"S",lot)
BorS = "S"
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = position - lot
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
## 出場
while( position != 0 ){
## 取得最新報價
Mdata<-GetMatchData(DataPath,Date,code)
TXF_MatchTime <- strptime(Mdata[[1]][2],'%H:%M:%OS')
TXF_MatchPrice <- as.numeric(Mdata[[1]][3])
## 停損 = Spread
if( position > 0 & (BPrice - TXF_MatchPrice) > spread ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0 & (TXF_MatchPrice - SPrice) > spread ){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
## 時間到 --> 出場
if( TXF_MatchTime >= outTime ){
if( position > 0 ){
OrderMKT(code,"S",position)
SPrice = TXF_MatchPrice
STime = TXF_MatchTime
position = 0
print(paste("Sell",code,"|","Sell Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}else if( position < 0){
OrderMKT(code,"B",abs(position))
BPrice = TXF_MatchPrice
BTime = TXF_MatchTime
position = 0
print(paste("Buy",code,"|","Buy Price:",TXF_MatchPrice,"|","Time:",Sys.time()))
}
}
}
#### 計算損益  ####
profit = SPrice - BPrice
print(paste("Profit :",profit))
## 回傳交易紀錄
if(is.na(BorS)){
print("No any signal !")
}else if(BorS == "B"){
SingleRecord = c(BorS="Buy",OpenPrice=BPrice,ClosePrice=SPrice,
OpenTime=as.character(BTime),CloseTime=as.character(STime),Profit=profit)
}else if(BorS == "S"){
SingleRecord = c(BorS="Sell",OpenPrice=SPrice,ClosePrice=BPrice,
OpenTime=as.character(STime),CloseTime=as.character(BTime),Profit=profit)
}
TradingRecord = rbind(TradingRecord,SingleRecord)
rownames(TradingRecord)=(1:nrow(TradingRecord))
return(TradingRecord)
}
OrderMKT(code,"S",position)
OrderMKT(code,"S",1)
code
